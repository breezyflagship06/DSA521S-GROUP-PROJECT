import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;
import java.util.Objects;
import java.util.Scanner;
import java.util.LinkedList;
public class Music {
    public static void main(String[] args) throws UnsupportedAudioFileException, IOException, LineUnavailableException {
        LinkedList<AudioInputStream> link=new LinkedList<AudioInputStream>();        String Forward = "";
        String Reverse = "";
        String End;
        int size = 10;
        int count = 5;

        AudioInputStream[] Songs = new AudioInputStream[size];

        File song = new File("src/02 Emzini Kababa.wav");
        File song1 = new File("src/03. Daliwonga - Chameleon (feat. Kabza De Small & DJ Maphorisa).wav");
        File song2 = new File("src/03. Aymos - Lyf Styl (feat. Mas Musiq).wav");
        File song3 = new File("src/5. DJ Obza - Bambelela ft Sphiwe.wav");
        File song4 = new File("src/06.Scorpion Kings - Msindisi ft Nomcebo.wav");
        File song5 = new File("src/12. Dj Obza - Umama ft Sphiwe Vox.wav");
        File song6 = new File("src/018. Twenty One Pilots - Stressed Out.wav");
        File song7 = new File("src/Blaq Diamond - SummerYoMuthi (Official Audio) (320 kbps).wav");
        File song8 = new File("src/Boohle & Josiah De Disciple- Mama ( Official Music Video).wav");
        File song9 = new File("src/Bopha (Official Music Video).wav");

        AudioInputStream audioStream = AudioSystem.getAudioInputStream(song);
        AudioInputStream audioStream1 = AudioSystem.getAudioInputStream(song1);
        AudioInputStream audioStream2 = AudioSystem.getAudioInputStream(song2);
        AudioInputStream audioStream3 = AudioSystem.getAudioInputStream(song3);
        AudioInputStream audioStream4 = AudioSystem.getAudioInputStream(song4);
        AudioInputStream audioStream5 = AudioSystem.getAudioInputStream(song5);
        AudioInputStream audioStream6 = AudioSystem.getAudioInputStream(song6);
        AudioInputStream audioStream7 = AudioSystem.getAudioInputStream(song7);
        AudioInputStream audioStream8 = AudioSystem.getAudioInputStream(song8);

        link.add(audioStream);
        link.add(audioStream1);
        link.add(audioStream2);
        link.add(audioStream3);
        link.add(audioStream4);
        link.add(audioStream5);
        link.add(audioStream6);
        link.add(audioStream7);
        link.add(audioStream8);

        Clip clip = AudioSystem.getClip();
        clip.open(Songs[count]);

        String response ="";


        Scanner Keyboard = new Scanner(System.in);
        System.out.println("Enter 1 to Play Songs");
        System.out.println("Enter 2 to Repeat Play List");
        System.out.println("Enter 3 to Add or Remove");
        System.out.println("Enter 4 to Search");

        int Choice = Keyboard.nextInt();

        if (Choice == 1) {
            System.out.println("Would you like to play Forward or Reverse");
            String playChoice = Keyboard.next();
            if (Objects.equals(playChoice, Forward)) {
                songPlayForward(size,link,clip);
            } else if (Objects.equals(playChoice, Reverse)) {
                songPlayReverse(size, Songs);
            }
        } else if (Choice == 2) {
            do {
                Repeat(count, Songs, Keyboard);
                System.out.println("Enter Stop to End PlayBack ");
                End = Keyboard.next();
            } while (!End.equals("Stop"));


        } else if (Choice == 3) {
            System.out.print("Would you like to Add songs or");
            System.out.println("Would you like to Delete songs");
            String Select = Keyboard.next();
            if (Select.equals("Add")) {
                System.out.println("How many songs would you like to add");
                size = Keyboard.nextInt();
                Add(size, Songs);
            } else if (Select.equals("Delete")) {
                Delete(Songs, size);
            }
        } else if (Choice == 4) {
            Search(size, Songs);
        }
    }

    private static void Search(int size, AudioInputStream[] songs) {
    }

    private static void Delete(AudioInputStream[] songs, int size) {
    }

    private static void Add(int size, AudioInputStream[] songs) {
    }


    public static void songPlayForward(int count, AudioInputStream[] Songs,Clip clip,Scanner Keyboard) throws LineUnavailableException, IOException {
        clip.open(Songs[count]);

        String response ="";
        while (!response.equals("Q")) {
            System.out.println("P=play");
            System.out.println("S=Stop");
            System.out.println("R=Reset");
            System.out.println("Q=Quit");
            System.out.println();
            System.out.print("Enter your Choice");
            System.out.println();
            response = Keyboard.next();
            response = response.toUpperCase();

            switch (response) {
                case ("P"):
                    clip.start();
                    break;
                case ("S"):
                    clip.stop();
                    break;
                case ("R"):
                    clip.setMicrosecondPosition(0);
                    break;
                case ("Q"):
                    clip.close();
                    break;
                default:
                    System.out.println("Not a valid response");
            }
        for (int i = 0; i < count; i++) {
            System.out.print(Songs[i]);
        }

    }

    public static void songPlayReverse(int size, AudioInputStream[] Songs) {
        for (int i = size; i > 0; i--) {
            System.out.print(Songs[i]);
        }

    }

    public static void Repeat(int count, AudioInputStream[] Songs, Scanner Keyboard) throws LineUnavailableException, IOException {
        for (int i = 0; i < count; i++) {
            Clip clip = AudioSystem.getClip();
            clip.open(Songs[count]);

            String response = "";
            while (!response.equals("Q")) {
                System.out.println("P=play");
                System.out.println("S=Stop");
                System.out.println("R=Reset");
                System.out.println("Q=Quit");
                System.out.println();
                System.out.print("Enter your Choice");
                System.out.println();
                response = Keyboard.next();
                response = response.toUpperCase();

                switch (response) {
                    case ("P"):
                        clip.start();
                        break;
                    case ("S"):
                        clip.stop();
                        break;
                    case ("R"):
                        clip.setMicrosecondPosition(0);
                        break;
                    case ("Q"):
                        clip.close();
                        break;
                    default:
                        System.out.println("Not a valid response");
                }
            }

        }
    }

